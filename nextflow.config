params {
    // Input options
    samplename               = null // Name of the sample to process
    manifestdir              = null // Manifest dir to look for JSONs for the given sample name
    sampledir                = null // Sample dir for redsheet
    samples                  = null // alternatively, provide a txt file containing full path to JSON files. This works for multiple samples too.
    redsheet                 = null // OR provide a redsheet
    reference                = null

    // Output options
    outdir                   = null
    tracedir                 = "${params.outdir}/pipeline_info"
    
    // FASTQs merging
    merge_FASTQs             = null // false (no-merging), per-lane, per-sequencer

    /*
    Quality filtering and trimming: Fastp
    */
    fastp_threads            = 8
    cut_window_size          = 5
    qualified_quality_phred  = 20
    length_required          = 50

    /*
    Alignment: BWA-MEM
    */
    bwamem_threads           = 8

    /*
    BAM merging
    */
    sambamba_merge_threads   = 28

    /*
    Mapped BAM filtering: Samtools
    */
    skip_filter              = true
    samtools_filter_threads  = 10
    exclude_flags            = 4
    require_flags            = false
    min_MQ                   = 30

    /*
    Mark duplicates: Sambamba
    */
    sambamba_markdup_threads = 10
    overflow_list_size       = 2000000
    remove_duplicates        = false
    tmpdir                   = '/rawfsx/early_cancer_test_runs/tmp'

    /*
    Coverage: mosdepth
    */
    mosdepth_threads         = 10
    flag                     = 3840
    include_flag             = 2
   
    /*
    Collect multiple metrics: Picard
    */
    MULTI_METRICS_PROGRAMS   = 'CollectAlignmentSummaryMetrics,QualityScoreDistribution,CollectGcBiasMetrics'
}

/*
Execution reports
*/
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/${trace_timestamp}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/${trace_timestamp}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/${trace_timestamp}/execution_trace_${trace_timestamp}.txt"
    fields = 'name,task_id,hash,native_id,status,exit,submit,start,complete,duration,realtime,queue,cpus,%cpu,peak_rss,peak_vmem,rchar,wchar'
}

/*
Work directory
*/
workDir = "${params.outdir}/work_${trace_timestamp}"
cleanup = true

/*
Profiles: Execulte locally or on cluster
*/
profiles {
	standard { process.executor = 'local' }

	cloudcluster { 
        process.executor = 'slurm'
        process.queue    = 'bfx-large'
    }

    sc1cluster { 
        process.executor = 'uge'
        process.clusterOptions = "-q all.q -P rssrbfx"
        //env.PATH = "/sc1/groups/bfx-red/projects/neusomatic/strand/benchmarking/earlycancer/environment/early-cancer-detection/bin:/sc1/groups/bfx-red/projects/neusomatic/strand/benchmarking/earlycancer/environment/python3/bin:$PATH"
        process.penv = 'smp'
    }
}

includeConfig 'configs/modules.config'
includeConfig 'configs/resources.config'
