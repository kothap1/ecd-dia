process {
    withName:parseManifests {
        ext.args   = [
                params.merge_FASTQs == "per-lane" ? "--processing per-lane" : params.merge_FASTQs == "per-sequencer" ? "--processing per-sequencer" : "--processing no-merging",
                params.samples ? "--samples ${params.samples}" : params.samplename ? "--samplename ${params.samplename}" : "--redsheet ${params.redsheet}",
                params.manifestdir ? "--manifestdir ${params.manifestdir}" : "--sampledir ${params.sampledir}"
            ].join(' ').trim()
    }

    /* NOTE: not retained in v1 of the pipeline, might need later
    withName:mergeFastqs {
        publishDir = [
            [
                path: { "$params.outdir/merged_fqs/" },
                pattern: "*merged.fastq.gz",
                mode: 'link'
            ]
        ]
    }
    */

    withName:fastp {
        ext.args   = [
                "--thread ${params.fastp_threads}",
                "--cut_window_size ${params.cut_window_size}",
                "--qualified_quality_phred ${params.qualified_quality_phred}",
                "--length_required ${params.length_required}",
                "--detect_adapter_for_pe",
                "--trim_poly_x",
                "--trim_poly_g",
                "--cut_tail"
            ].join(' ').trim()

        publishDir = [
            [
                path: { "$params.outdir/01_QC_reports/fastp/" },
                pattern: "*.json",
                mode: 'link'
            ]
        ]
    }

    withName:bwamem {
        ext.args   = [
                "-t ${params.bwamem_threads}",
            ].join(' ').trim()
    }

    withName:sambamba_merge {
        ext.args   = [
                "--nthreads ${params.sambamba_merge_threads}",
            ].join(' ').trim()
    }

    withName:samtools_filter {
        ext.args   = [
                params.exclude_flags ? "-F ${params.exclude_flags}" : '',
                params.require_flags ? "-f ${params.require_flags}" : '',
                params.min_MQ ? "-q ${params.min_MQ}" : '',
                params.samtools_filter_threads ? "-@ ${params.samtools_filter_threads}" : '',
            ].join(' ').trim()
    }

    withName:sambamba_markdup {
        ext.args   = [
                "--nthreads ${params.sambamba_markdup_threads}",
                "--overflow-list-size ${params.overflow_list_size}",
                "--tmpdir ${params.tmpdir}",
                params.remove_duplicates ? "--remove-duplicates" : '',
            ].join(' ').trim()

        publishDir = [
            [
                path: { "$params.outdir/02_dups_marked_reads/" },
                pattern: "*.{bam,bai}",
                mode: 'link'
            ]
        ]
    }

    withName:mosdepth {
        ext.args   = [
                "--no-per-base",
                "-t ${params.mosdepth_threads}",
                "-F ${params.flag}",
                params.include_flag ? "-i ${params.include_flag}" : '',
            ].join(' ').trim()

        publishDir = [
            [
                path: { "$params.outdir/01_QC_reports/mosdepth/" },
                pattern: "*.txt",
                mode: 'link'
            ]
        ]
    }

    withName:picard_CollectInsertSizeMetrics {
        ext.args   = [
                "-VALIDATION_STRINGENCY SILENT",
            ].join(' ').trim()

        publishDir = [
            [
                path: { "$params.outdir/01_QC_reports/picard_CollectInsertSizeMetrics/" },
                pattern: "*.txt",
                mode: 'link'
            ]
        ]
    }

    withName:picard_CollectMultipleMetrics {
        ext.args   = [
                "-VALIDATION_STRINGENCY SILENT",
            ].join(' ').trim()

        publishDir = [
            [
                path: { "$params.outdir/01_QC_reports/picard_CollectMultipleMetrics" },
                pattern: "*metrics",
                mode: 'link'
            ]
        ]
    }

    withName:collateQC {
        publishDir = [
            [
                path: { "$params.outdir/01_QC_reports/batch_qc" },
                pattern: "*.{html,xlsx}",
                mode: 'link'
            ]
        ]
    }

    withName:multiqc {
        publishDir = [
            [
                path: { "$params.outdir/01_QC_reports/multiqc" },
                pattern: "*.html",
                mode: 'link'
            ]
        ]
    }

    withName:generate_manifests {
        publishDir = [
            [
                path: { "$params.outdir/03_manifests/" },
                pattern: "*json",
                mode: 'link'
            ]
        ]
    }
}